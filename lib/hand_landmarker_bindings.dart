// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `io.github.iot_gamer.hand_landmarker.MyHandLandmarker`
class MyHandLandmarker extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<MyHandLandmarker> $type;

  @jni$_.internal
  MyHandLandmarker.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'io/github/iot_gamer/hand_landmarker/MyHandLandmarker');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $MyHandLandmarker$NullableType();
  static const type = $MyHandLandmarker$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory MyHandLandmarker(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return MyHandLandmarker.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$context.pointer)
        .reference);
  }

  static final _id_initialize = _class.instanceMethodId(
    r'initialize',
    r'()V',
  );

  static final _initialize = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void initialize()`
  void initialize() {
    _initialize(reference.pointer, _id_initialize as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_detect = _class.instanceMethodId(
    r'detect',
    r'(Ljava/nio/ByteBuffer;III)Ljava/lang/String;',
  );

  static final _detect = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public final java.lang.String detect(java.nio.ByteBuffer byteBuffer, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString detect(
    jni$_.JByteBuffer byteBuffer,
    int i,
    int i1,
    int i2,
  ) {
    final _$byteBuffer = byteBuffer.reference;
    return _detect(reference.pointer, _id_detect as jni$_.JMethodIDPtr,
            _$byteBuffer.pointer, i, i1, i2)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $MyHandLandmarker$NullableType
    extends jni$_.JObjType<MyHandLandmarker?> {
  @jni$_.internal
  const $MyHandLandmarker$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/github/iot_gamer/hand_landmarker/MyHandLandmarker;';

  @jni$_.internal
  @core$_.override
  MyHandLandmarker? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : MyHandLandmarker.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MyHandLandmarker?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MyHandLandmarker$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyHandLandmarker$NullableType) &&
        other is $MyHandLandmarker$NullableType;
  }
}

final class $MyHandLandmarker$Type extends jni$_.JObjType<MyHandLandmarker> {
  @jni$_.internal
  const $MyHandLandmarker$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lio/github/iot_gamer/hand_landmarker/MyHandLandmarker;';

  @jni$_.internal
  @core$_.override
  MyHandLandmarker fromReference(jni$_.JReference reference) =>
      MyHandLandmarker.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<MyHandLandmarker?> get nullableType =>
      const $MyHandLandmarker$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($MyHandLandmarker$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($MyHandLandmarker$Type) &&
        other is $MyHandLandmarker$Type;
  }
}
